#Import Needed Libraries
import tkinter as tk
from tkinter import messagebox #messagebox
from tkinter import simpledialog
from tkinter import filedialog
import datetime
from pandas import DataFrame
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

#Class for CovidGUI
class CovidGUI:

	def __init__(self): # Initialise Tkinter window app
		self.root = tk.Tk()
		self.root.title("CovidGUI") #Name the window
		#self.root.geometry('500x200') #Size the window
		#self.root.overrideredirect(True)
		self.root.geometry("{0}x{1}+0+0".format(self.root.winfo_screenwidth(), self.root.winfo_screenheight()))
		self._create_menubar() #Run create menubar function
		#self.image_bck() #Run image background function

	def _create_menubar(self):
		self.menubar = tk.Menu(self.root,foreground='white', activebackground='#0B3D54', activeforeground='white')
		self.root.configure(menu=self.menubar)

		predictCovid = tk.Menu(self.menubar,tearoff=0)
		self.menubar.add_cascade(label="Predict Covid", menu=predictCovid)
		predictCovid.add_command(label="Insert Image",command=self.prediction)

		showAccuracy = tk.Menu(self.menubar,tearoff=0)
		self.menubar.add_cascade(label="Show Accuracy", menu=showAccuracy)
		showAccuracy.add_command(label="Accuracy Graph",command=self.accuracy)
		showAccuracy.add_command(label="Loss Graph",command=self.loss)

		# Exit menu
		exitMenu = tk.Menu(self.menubar,tearoff=0) #Add exit to menubar
		self.menubar.add_cascade(label="Exit", menu=exitMenu)
		exitMenu.add_command(label="Exit", command=self.myExitApplication) #Run exit function created below

	def myExitApplication(self):
		MsgBox = messagebox.askquestion('Exit App', 'Are you sure?')#Ask if user wants to quit
		if MsgBox == 'yes': # If answer yes
			self.root.destroy() #Destroy Window

	def prediction(self):
		file = filedialog.askopenfilename() #Ask for a file
		print(file)

	def loss(self):
		epochs = []
		for i in range(1,51):
			epochs.append(i)

		Loss = [0.35095396637916565, 0.2375968098640442, 0.1807675063610077, 0.19388948380947113, 0.19901779294013977, 0.17891007661819458, 0.19164767861366272, 0.17094573378562927, 0.15175482630729675, 0.15120607614517212, 0.16901054978370667, 0.15045268833637238, 0.15296511352062225, 0.15881295502185822, 0.11494407057762146, 0.13983596861362457, 0.135184645652771, 0.11538941413164139, 0.13314975798130035, 0.09726697951555252, 0.13840095698833466, 0.12030941247940063, 0.12625040113925934, 0.1048174798488617, 0.13675354421138763, 0.09733975678682327, 0.10574481636285782, 0.1265397071838379, 0.10283762216567993, 0.09577488154172897, 0.10737567394971848, 0.08467595279216766, 0.09936200827360153, 0.1319345384836197, 0.08844879269599915, 0.11222650855779648, 0.11564309895038605, 0.08534527570009232, 0.08940965682268143, 0.07626765221357346, 0.07080443203449249, 0.11775633692741394, 0.08795706182718277, 0.07838278263807297, 0.08027411997318268, 0.10469061136245728, 0.07997912913560867, 0.08159048110246658, 0.0748230442404747, 0.09180451929569244]
		Validation_Loss = [0.23199059069156647, 0.12365112453699112, 0.11751116067171097, 0.18901850283145905, 0.14623263478279114, 0.1452164649963379, 0.11307907849550247, 0.115276999771595, 0.09064164757728577, 0.10554715245962143, 0.10249847918748856, 0.11206313967704773, 0.10694234073162079, 0.10198948532342911, 0.10079033672809601, 0.11246110498905182, 0.09432362020015717, 0.13430555164813995, 0.18120485544204712, 0.10409671813249588, 0.12333453446626663, 0.09204921871423721, 0.12156593054533005, 0.12972375750541687, 0.11429635435342789, 0.1855204999446869, 0.14075782895088196, 0.1425090730190277, 0.11015807092189789, 0.12201374769210815, 0.12873530387878418, 0.12436564266681671, 0.12034592777490616, 0.15333212912082672, 0.18759509921073914, 0.14241191744804382, 0.16688880324363708, 0.1299474984407425, 0.14745721220970154, 0.1593845635652542, 0.188389390707016, 0.1140073835849762, 0.15565957129001617, 0.14104297757148743, 0.17952115833759308, 0.13396787643432617, 0.1313711702823639, 0.13619489967823029, 0.15330326557159424, 0.13602042198181152]
		
		fig = Figure(figsize=(6,6))
		a = fig.add_subplot(111)
		a.plot(epochs,Loss,color='orange',label="Loss")
		a.plot(epochs, Validation_Loss,color='blue',label="Validation Loss")
		a.invert_yaxis()

		a.set_title ("Loss vs Validation Loss", fontsize=16)
		a.set_xlabel("Epochs", fontsize=14)
		a.legend(loc="lower right")

		canvas = FigureCanvasTkAgg(fig, master=self.root)
		canvas.get_tk_widget().pack(side="left")
		canvas.draw()

	def accuracy(self):
		epochs = []
		for i in range(1,51):
			epochs.append(i)

		Accuracy = [0.8604999780654907, 0.9039999842643738, 0.9309999942779541, 0.9290000200271606, 0.9259999990463257, 0.9309999942779541, 0.934499979019165, 0.9459999799728394, 0.9505000114440918, 0.9440000057220459, 0.9359999895095825, 0.9495000243186951, 0.9424999952316284, 0.9520000219345093, 0.9589999914169312, 0.953499972820282, 0.9610000252723694, 0.9629999995231628, 0.9620000123977661, 0.9664999842643738, 0.9545000195503235, 0.9614999890327454, 0.9614999890327454, 0.9620000123977661, 0.9514999985694885, 0.968500018119812, 0.9670000076293945, 0.9589999914169312, 0.9670000076293945, 0.9639999866485596, 0.965499997138977, 0.9710000157356262, 0.9664999842643738, 0.9605000019073486, 0.968500018119812, 0.9610000252723694, 0.965499997138977, 0.9739999771118164, 0.9674999713897705, 0.9739999771118164, 0.9745000004768372, 0.9660000205039978, 0.9674999713897705, 0.9729999899864197, 0.9704999923706055, 0.9679999947547913, 0.9735000133514404, 0.9750000238418579, 0.9745000004768372, 0.9739999771118164]
		Validation_Accuracy = [0.9179999828338623, 0.9559999704360962, 0.9649999737739563, 0.9430000185966492, 0.9559999704360962, 0.9559999704360962, 0.9589999914169312, 0.9660000205039978, 0.9760000109672546, 0.9670000076293945, 0.9670000076293945, 0.968999981880188, 0.968999981880188, 0.9710000157356262, 0.9700000286102295, 0.9639999866485596, 0.9739999771118164, 0.9660000205039978, 0.9509999752044678, 0.9700000286102295, 0.972000002861023, 0.9729999899864197, 0.9649999737739563, 0.9660000205039978, 0.9700000286102295, 0.9599999785423279, 0.9629999995231628, 0.9610000252723694, 0.9660000205039978, 0.9670000076293945, 0.9649999737739563, 0.968999981880188, 0.9710000157356262, 0.9580000042915344, 0.9559999704360962, 0.9620000123977661, 0.9629999995231628, 0.9700000286102295, 0.9660000205039978, 0.9679999947547913, 0.9599999785423279, 0.9729999899864197, 0.9639999866485596, 0.9670000076293945, 0.9629999995231628, 0.9649999737739563, 0.9710000157356262, 0.968999981880188, 0.9639999866485596, 0.9670000076293945]
		
		fig = Figure(figsize=(6,6))
		a = fig.add_subplot(111)
		a.plot(epochs,Accuracy,color='orange',label="Accuracy")
		a.plot(epochs, Validation_Accuracy,color='blue',label="Validation Accuracy")

		a.set_title ("Accuracy vs Validation Accuracy", fontsize=16)
		a.set_xlabel("Epochs", fontsize=14)
		a.legend(loc="lower right")

		canvas = FigureCanvasTkAgg(fig, master=self.root)
		canvas.get_tk_widget().pack(side="left")
		canvas.draw()

app = CovidGUI()#Run class CovidGui
tk.mainloop()#Tkinter loops forever until interrupted